{"version":3,"file":"parseStyles.js","names":["getBaseStyles","getCellStyles","getNumberFormats","parseStyles","content","xml","doc","createDocument","baseStyles","map","parseCellStyle","numberFormats","parseNumberFormatStyle","reduce","formats","format","id","getCellStyle","xf","hasAttribute","xfId","numFmt","getAttribute","template","numFmts","style","numberFormatId","numberFormat"],"sources":["../../source/read/parseStyles.js"],"sourcesContent":["import {\r\n  getBaseStyles,\r\n  getCellStyles,\r\n  getNumberFormats\r\n} from '../xml/xlsx.js'\r\n\r\n// http://officeopenxml.com/SSstyles.php\r\n// Returns an array of cell styles.\r\n// A cell style index is its ID.\r\nexport default function parseStyles(content, xml) {\r\n  if (!content) {\r\n    return {}\r\n  }\r\n\r\n  // https://social.msdn.microsoft.com/Forums/sqlserver/en-US/708978af-b598-45c4-a598-d3518a5a09f0/howwhen-is-cellstylexfs-vs-cellxfs-applied-to-a-cell?forum=os_binaryfile\r\n  // https://www.office-forums.com/threads/cellxfs-cellstylexfs.2163519/\r\n  const doc = xml.createDocument(content)\r\n\r\n  const baseStyles = getBaseStyles(doc)\r\n    .map(parseCellStyle)\r\n\r\n  const numberFormats = getNumberFormats(doc)\r\n    .map(parseNumberFormatStyle)\r\n    .reduce((formats, format) => {\r\n      // Format ID is a numeric index.\r\n      // There're some standard \"built-in\" formats (in Excel) up to about `100`.\r\n      formats[format.id] = format\r\n      return formats\r\n    }, [])\r\n\r\n  const getCellStyle = (xf) => {\r\n    if (xf.hasAttribute('xfId')) {\r\n      return {\r\n        ...baseStyles[xf.xfId],\r\n        ...parseCellStyle(xf, numberFormats)\r\n      }\r\n    }\r\n    return parseCellStyle(xf, numberFormats)\r\n  }\r\n\r\n  return getCellStyles(doc).map(getCellStyle)\r\n}\r\n\r\nfunction parseNumberFormatStyle(numFmt) {\r\n  return {\r\n    id: numFmt.getAttribute('numFmtId'),\r\n    template: numFmt.getAttribute('formatCode')\r\n  }\r\n}\r\n\r\n// http://www.datypic.com/sc/ooxml/e-ssml_xf-2.html\r\nfunction parseCellStyle(xf, numFmts) {\r\n  const style = {}\r\n  if (xf.hasAttribute('numFmtId')) {\r\n    const numberFormatId = xf.getAttribute('numFmtId')\r\n    // Built-in number formats don't have a `<numFmt/>` element in `styles.xml`.\r\n    // https://hexdocs.pm/xlsxir/number_styles.html\r\n    if (numFmts[numberFormatId]) {\r\n      style.numberFormat = numFmts[numberFormatId]\r\n    } else {\r\n      style.numberFormat = { id: numberFormatId }\r\n    }\r\n  }\r\n  return style\r\n}"],"mappings":";;;;;;AAAA,SACEA,aADF,EAEEC,aAFF,EAGEC,gBAHF,QAIO,gBAJP,C,CAMA;AACA;AACA;;AACA,eAAe,SAASC,WAAT,CAAqBC,OAArB,EAA8BC,GAA9B,EAAmC;EAChD,IAAI,CAACD,OAAL,EAAc;IACZ,OAAO,EAAP;EACD,CAH+C,CAKhD;EACA;;;EACA,IAAME,GAAG,GAAGD,GAAG,CAACE,cAAJ,CAAmBH,OAAnB,CAAZ;EAEA,IAAMI,UAAU,GAAGR,aAAa,CAACM,GAAD,CAAb,CAChBG,GADgB,CACZC,cADY,CAAnB;EAGA,IAAMC,aAAa,GAAGT,gBAAgB,CAACI,GAAD,CAAhB,CACnBG,GADmB,CACfG,sBADe,EAEnBC,MAFmB,CAEZ,UAACC,OAAD,EAAUC,MAAV,EAAqB;IAC3B;IACA;IACAD,OAAO,CAACC,MAAM,CAACC,EAAR,CAAP,GAAqBD,MAArB;IACA,OAAOD,OAAP;EACD,CAPmB,EAOjB,EAPiB,CAAtB;;EASA,IAAMG,YAAY,GAAG,SAAfA,YAAe,CAACC,EAAD,EAAQ;IAC3B,IAAIA,EAAE,CAACC,YAAH,CAAgB,MAAhB,CAAJ,EAA6B;MAC3B,uCACKX,UAAU,CAACU,EAAE,CAACE,IAAJ,CADf,GAEKV,cAAc,CAACQ,EAAD,EAAKP,aAAL,CAFnB;IAID;;IACD,OAAOD,cAAc,CAACQ,EAAD,EAAKP,aAAL,CAArB;EACD,CARD;;EAUA,OAAOV,aAAa,CAACK,GAAD,CAAb,CAAmBG,GAAnB,CAAuBQ,YAAvB,CAAP;AACD;;AAED,SAASL,sBAAT,CAAgCS,MAAhC,EAAwC;EACtC,OAAO;IACLL,EAAE,EAAEK,MAAM,CAACC,YAAP,CAAoB,UAApB,CADC;IAELC,QAAQ,EAAEF,MAAM,CAACC,YAAP,CAAoB,YAApB;EAFL,CAAP;AAID,C,CAED;;;AACA,SAASZ,cAAT,CAAwBQ,EAAxB,EAA4BM,OAA5B,EAAqC;EACnC,IAAMC,KAAK,GAAG,EAAd;;EACA,IAAIP,EAAE,CAACC,YAAH,CAAgB,UAAhB,CAAJ,EAAiC;IAC/B,IAAMO,cAAc,GAAGR,EAAE,CAACI,YAAH,CAAgB,UAAhB,CAAvB,CAD+B,CAE/B;IACA;;IACA,IAAIE,OAAO,CAACE,cAAD,CAAX,EAA6B;MAC3BD,KAAK,CAACE,YAAN,GAAqBH,OAAO,CAACE,cAAD,CAA5B;IACD,CAFD,MAEO;MACLD,KAAK,CAACE,YAAN,GAAqB;QAAEX,EAAE,EAAEU;MAAN,CAArB;IACD;EACF;;EACD,OAAOD,KAAP;AACD"}